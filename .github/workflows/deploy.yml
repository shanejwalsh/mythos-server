name: Build and Deploy Rails App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mythos-server

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2 via Systems Manager
        run: |
          # Send deployment commands via SSM
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "#!/bin/bash",
              "set -e",
              "echo \"Starting deployment...\"",
              "# Install Docker if not present",
              "if ! command -v docker &> /dev/null; then",
              "  sudo yum update -y",
              "  sudo yum install -y docker",
              "  sudo systemctl start docker",
              "  sudo systemctl enable docker",
              "  sudo usermod -aG docker ec2-user",
              "fi",
              "# Login to ECR",
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com",
              "# Stop and remove existing container",
              "docker stop mythos-server || true",
              "docker rm mythos-server || true",
              "# Pull latest image",
              "docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/mythos-server:latest",
              "# Run new container",
              "docker run -d -p 80:8080 \\",
              "  -e RAILS_ENV=production \\",
              "  -e PORT=8080 \\",
              "  -e JWT_SECRET=\"${{ secrets.JWT_SECRET }}\" \\",
              "  -e DATABASE_URL=\"${{ secrets.DATABASE_URL }}\" \\",
              "  -e SECRET_KEY_BASE=\"${{ secrets.SECRET_KEY_BASE }}\" \\",
              "  --name mythos-server \\",
              "  --restart unless-stopped \\",
              "  ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/mythos-server:latest",
              "# Clean up old images",
              "docker image prune -f",
              "echo \"Deployment completed successfully\""
            ]' \
            --region ${{ env.AWS_REGION }} \
            --query 'Command.CommandId' \
            --output text)

          echo "Command ID: $COMMAND_ID"

          # Wait for command to complete and check status
          echo "Waiting for deployment to complete..."
          sleep 10

          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ env.AWS_REGION }} \
            --query 'Status' \
            --output text)

          echo "Deployment status: $STATUS"

          # Get command output
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ env.AWS_REGION }} \
            --query 'StandardOutputContent' \
            --output text

          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed!"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --region ${{ env.AWS_REGION }} \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi
