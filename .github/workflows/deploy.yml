name: Build and Deploy Rails App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1 # Change to your region
  ECR_REPOSITORY: mythos-server

jobs:
  build:
    name: Build and Push
    # id: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          fi

          # Install AWS CLI if not already installed
          if ! command -v aws &> /dev/null; then
            sudo apt-get install -y awscli
          fi

          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Stop and remove existing container
          docker stop mythos-server || true
          docker rm mythos-server || true

          # Pull latest image
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Run new container
          docker run -d -p 80:8080 \
            -e RAILS_ENV=production \
            -e PORT=8080 \
            -e JWT_SECRET="$JWT_SECRET" \
            -e DATABASE_URL="$DATABASE_URL" \
            -e SECRET_KEY_BASE="$SECRET_KEY_BASE" \
            --name mythos-server \
            --restart unless-stopped \
            $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Clean up old images
          docker image prune -f
          EOF

          # Copy and execute deployment script
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            export AWS_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export SECRET_KEY_BASE="${{ secrets.SECRET_KEY_BASE }}"
            chmod +x ~/deploy.sh
            ~/deploy.sh
          EOF

          # Clean up
          rm -f private_key.pem

  # output:

  #   steps:
  #     - name: Output image digest
  #       run: echo "Image pushed with digest ${{ steps.build.outputs.digest }}"
